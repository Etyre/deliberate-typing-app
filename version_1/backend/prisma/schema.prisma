// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int     @id @default(autoincrement())
  username     String?
  passwordHash String?
  passwordSalt String?
  emailAddress String? @unique
  hasPaid      Boolean

  // User's current settings
  trialDisplayMode      TrialDisplayMode      @default(VISUAL)
  trainingTokenSourcing TrainingTokenSourcing @default(MANUAL_LIST)
  batchSize             Int                   @default(4)
  trainingAlgorithm     TrainingAlgorithm     @default(STRICT_WORST_SCORING_FIRST)
  // The trainingAlgorithm is currently non-loadbearing. All the algorithm settings are currently in the ttsAlgo settings.

  ttsAlgoDeliberatePractice     Boolean @default(true)
  ttsAlgoPrioritizeLapsedTokens Boolean @default(true)
  ttsAlgoReviewGraduatedTokens  Boolean @default(true)

  tokenHighlighting          TokenHighlighting @default(CURRENT_TRAINING_TOKENS)
  tokenHighlightingThreshold Int?

  // Link to all the user's sample-runs
  samples          Sample[]
  UserTrackedToken UserTrackedToken[]
}

enum TrialDisplayMode {
  VISUAL
  AUDIO
}

enum TrainingTokenSourcing {
  ALL_TRACKED_TOKENS
  MANUAL_LIST
}

enum TrainingAlgorithm {
  DELIBERATE_PRACTICE
  DELIBERATE_PRACTICE_PRIORIZING_LAPSED_WORDS
  STRICT_WORST_SCORING_FIRST
}

enum TokenHighlighting {
  CURRENT_TRAINING_TOKENS
  ALL_TRACKED_TOKENS
  TRACKED_TOKENS_ABOVE_THRESHOLD
  NO_HIGHLIGHTING
}

enum TokenStatus {
  PENDING
  TRAINING
  LAPSED
  GRADUATED
}

model Sample {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id])

  trialDisplayMode      TrialDisplayMode
  trainingTokenSourcing TrainingTokenSourcing
  batchSize             Int
  trainingAlgorithm     TrainingAlgorithm

  ttsAlgoDeliberatePractice     Boolean
  ttsAlgoPrioritizeLapsedTokens Boolean
  ttsAlgoReviewGraduatedTokens  Boolean
  tokenHighlighting             TokenHighlighting
  tokenHighlightingThreshold    Int?

  dateTimeStart            DateTime
  dateTimeEnd              DateTime
  targetText               String
  numberOfTargetWords      Int?
  numberOfTargetCharacters Int?

  missedWords         String[]
  numberOfMissedWords Int

  sampleTrackedTokens  SampleTrackedToken[]
  sampleTrainingTokens SampleTrainingToken[]
}

model TrackedToken {
  id          Int    @id @default(autoincrement())
  tokenString String @unique

  sampleTrackedTokens  SampleTrackedToken[]
  sampleTrainingTokens SampleTrainingToken[]
  UserTrackedToken     UserTrackedToken[]
}

enum TrackedTokenSource {
  MISSED_IN_PRACTICE
  ADDED_FROM_PERSONAL_CORPUS
}

// After a word is missed for the first time it is added to tracked tokens. Ever after, we track the number of hits and misses of that token.
model SampleTrackedToken {
  id             Int          @id @default(autoincrement())
  sampleId       Int
  sample         Sample       @relation(fields: [sampleId], references: [id])
  trackedTokenId Int
  trackedToken   TrackedToken @relation(fields: [trackedTokenId], references: [id])
  startIndex     Int
  wasMissed      Boolean
}

// Each sample (after the first ever missed word), has an associated set of tokens (a subset of tracked tokens), that are served in particular in that sample.
model SampleTrainingToken {
  id             Int          @id @default(autoincrement())
  sampleId       Int
  sample         Sample       @relation(fields: [sampleId], references: [id])
  trackedTokenId Int
  trackedToken   TrackedToken @relation(fields: [trackedTokenId], references: [id])
}

//
model UserTrackedToken {
  id             Int          @id @default(autoincrement())
  userId         Int
  user           User         @relation(fields: [userId], references: [id])
  trackedTokenId Int
  trackedToken   TrackedToken @relation(fields: [trackedTokenId], references: [id])

  status               TokenStatus        @default(PENDING)
  inPersonalizedCorpus Boolean            @default(false)
  tokenSource          TrackedTokenSource @default(MISSED_IN_PRACTICE)

  @@unique([userId, trackedTokenId])
}
